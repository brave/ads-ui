/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment Ad on Ad {\n    id\n    state\n    price\n    priceType\n    creative {\n      ...Creative\n    }\n  }\n  \n": types.AdFragmentDoc,
    "\n  fragment AdSet on AdSet {\n    id\n    price\n    createdAt\n    billingType\n    name\n    totalMax\n    perDay\n    state\n    segments {\n      code\n      name\n    }\n    oses {\n      code\n      name\n    }\n    conversions {\n      id\n      type\n      urlPattern\n      observationWindow\n    }\n    ads {\n      ...Ad\n    }\n  }\n  \n": types.AdSetFragmentDoc,
    "\n  fragment AdSetWithDeletedAds on AdSet {\n    id\n    createdAt\n    name\n    state\n    billingType\n    oses {\n      code\n      name\n    }\n    segments {\n      code\n      name\n    }\n    conversions {\n      id\n    }\n    ads(includeDeleted: true) {\n      ...Ad\n    }\n  }\n  \n": types.AdSetWithDeletedAdsFragmentDoc,
    "\n  mutation createAdSet($createAdSetInput: CreateAdSetInput!) {\n    createAdSet(createAdSetInput: $createAdSetInput) {\n      ...AdSet\n    }\n  }\n  \n": types.CreateAdSetDocument,
    "\n  mutation updateAdSet($updateAdSetInput: UpdateAdSetInput!) {\n    updateAdSet(updateAdSetInput: $updateAdSetInput) {\n      ...AdSet\n    }\n  }\n  \n": types.UpdateAdSetDocument,
    "fragment AdSet on AdSet {\n  id\n  price\n  createdAt\n  billingType\n  name\n  totalMax\n  perDay\n  state\n  segments {\n    code\n    name\n  }\n  oses {\n    code\n    name\n  }\n  conversions {\n    id\n    type\n    urlPattern\n    observationWindow\n  }\n  ads {\n    ...Ad\n  }\n}\n\nfragment Ad on Ad {\n  id\n  state\n  price\n  priceType\n  creative {\n    ...Creative\n  }\n}\n\nfragment AdSetWithDeletedAds on AdSet {\n  id\n  createdAt\n  name\n  state\n  billingType\n  oses {\n    code\n    name\n  }\n  segments {\n    code\n    name\n  }\n  conversions {\n    id\n  }\n  ads(includeDeleted: true) {\n    ...Ad\n  }\n}\n\nmutation createAdSet($createAdSetInput: CreateAdSetInput!) {\n  createAdSet(createAdSetInput: $createAdSetInput) {\n    ...AdSet\n  }\n}\n\nmutation updateAdSet($updateAdSetInput: UpdateAdSetInput!) {\n  updateAdSet(updateAdSetInput: $updateAdSetInput) {\n    ...AdSet\n  }\n}": types.AdSetFragmentDoc,
    "\n  fragment AdvertiserBillingAddress on Advertiser {\n    billingAddress {\n      id\n      street1\n      street2\n      city\n      country\n      state\n      zipcode\n    }\n  }\n": types.AdvertiserBillingAddressFragmentDoc,
    "\n  fragment AdvertiserSummary on Advertiser {\n    id\n    name\n    state\n    billingEmail\n    additionalBillingEmails\n    createdAt\n    modifiedAt\n    publicKey\n  }\n": types.AdvertiserSummaryFragmentDoc,
    "\n  fragment Advertiser on Advertiser {\n    ...AdvertiserSummary\n    referrer\n    phone\n    selfServiceManageCampaign\n    selfServiceSetPrice\n  }\n  \n": types.AdvertiserFragmentDoc,
    "\n  fragment AdvertiserCampaigns on Advertiser {\n    id\n    name\n    selfServiceManageCampaign\n    selfServiceSetPrice\n    campaigns {\n      ...CampaignSummary\n    }\n  }\n  \n": types.AdvertiserCampaignsFragmentDoc,
    "\n  fragment AdvertiserImage on AdvertiserImage {\n    name\n    imageUrl\n    format\n    id\n    createdAt\n  }\n": types.AdvertiserImageFragmentDoc,
    "\n  fragment AdvertiserPrice on AdvertiserPrice {\n    billingModelPrice\n    billingType\n    format\n  }\n": types.AdvertiserPriceFragmentDoc,
    "\n  query advertiser($id: String!) {\n    advertiser(id: $id) {\n      id\n      publicKey\n    }\n  }\n": types.AdvertiserDocument,
    "\n  mutation updateAdvertiser($updateAdvertiserInput: UpdateAdvertiserInput!) {\n    updateAdvertiser(updateAdvertiserInput: $updateAdvertiserInput) {\n      id\n      publicKey\n    }\n  }\n": types.UpdateAdvertiserDocument,
    "\n  query advertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n    advertiserCampaigns(id: $id, filter: $filter) {\n      ...AdvertiserCampaigns\n    }\n  }\n  \n": types.AdvertiserCampaignsDocument,
    "\n  query advertiserImages($id: String!) {\n    advertiser(id: $id) {\n      images {\n        ...AdvertiserImage\n      }\n    }\n  }\n  \n": types.AdvertiserImagesDocument,
    "\n  query advertiserPrices($id: String!) {\n    advertiser(id: $id) {\n      prices {\n        ...AdvertiserPrice\n      }\n    }\n  }\n  \n": types.AdvertiserPricesDocument,
    "\n  query advertiserBillingAddress($id: String!) {\n    advertiser(id: $id) {\n      id\n      ...AdvertiserBillingAddress\n    }\n  }\n  \n": types.AdvertiserBillingAddressDocument,
    "\n  mutation uploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n    createAdvertiserImage(createImageInput: $input) {\n      name\n    }\n  }\n": types.UploadAdvertiserImageDocument,
    "fragment AdvertiserSummary on Advertiser {\n  id\n  name\n  state\n  billingEmail\n  additionalBillingEmails\n  createdAt\n  modifiedAt\n  publicKey\n}\n\nfragment AdvertiserBillingAddress on Advertiser {\n  billingAddress {\n    id\n    street1\n    street2\n    city\n    country\n    state\n    zipcode\n  }\n}\n\nfragment Advertiser on Advertiser {\n  ...AdvertiserSummary\n  referrer\n  phone\n  selfServiceManageCampaign\n  selfServiceSetPrice\n}\n\nquery advertiser($id: String!) {\n  advertiser(id: $id) {\n    id\n    publicKey\n  }\n}\n\nmutation updateAdvertiser($updateAdvertiserInput: UpdateAdvertiserInput!) {\n  updateAdvertiser(updateAdvertiserInput: $updateAdvertiserInput) {\n    id\n    publicKey\n  }\n}\n\nfragment AdvertiserCampaigns on Advertiser {\n  id\n  name\n  selfServiceManageCampaign\n  selfServiceSetPrice\n  campaigns {\n    ...CampaignSummary\n  }\n}\n\nquery advertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n  advertiserCampaigns(id: $id, filter: $filter) {\n    ...AdvertiserCampaigns\n  }\n}\n\nfragment AdvertiserImage on AdvertiserImage {\n  name\n  imageUrl\n  format\n  id\n  createdAt\n}\n\nfragment AdvertiserPrice on AdvertiserPrice {\n  billingModelPrice\n  billingType\n  format\n}\n\nquery advertiserImages($id: String!) {\n  advertiser(id: $id) {\n    images {\n      ...AdvertiserImage\n    }\n  }\n}\n\nquery advertiserPrices($id: String!) {\n  advertiser(id: $id) {\n    prices {\n      ...AdvertiserPrice\n    }\n  }\n}\n\nquery advertiserBillingAddress($id: String!) {\n  advertiser(id: $id) {\n    id\n    ...AdvertiserBillingAddress\n  }\n}\n\nmutation uploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n  createAdvertiserImage(createImageInput: $input) {\n    name\n  }\n}": types.AdvertiserSummaryFragmentDoc,
    "\n  fragment Engagement on Engagement {\n    creativeinstanceid\n    createdat\n    type\n    pricetype\n    creativesetname\n    creativesetid\n    creativename\n    creativeid\n    creativestate\n    creativepayload\n    view\n    click\n    viewthroughConversion\n    clickthroughConversion\n    conversion\n    dismiss\n    downvote\n    landed\n    spend\n    upvote\n    downvote\n    price\n    android\n    ios\n    linux\n    macos\n    windows\n  }\n": types.EngagementFragmentDoc,
    "\n  fragment CampaignWithEngagements on Campaign {\n    id\n    name\n    state\n    budget\n    spent\n    currency\n    createdAt\n    startAt\n    endAt\n    currency\n    pacingIndex\n    format\n    adSets {\n      id\n      conversions {\n        id\n        type\n        extractExternalId\n      }\n    }\n    engagements {\n      ...Engagement\n    }\n  }\n  \n": types.CampaignWithEngagementsFragmentDoc,
    "\n  fragment CampaignMetricSummaryValues on Metrics {\n    click\n    impression\n    siteVisit\n    spendUsd\n    rates {\n      clickThrough\n    }\n  }\n": types.CampaignMetricSummaryValuesFragmentDoc,
    "\n  fragment CampaignMetricDetailValues on Metrics {\n    click\n    impression\n    siteVisit\n    conversion\n    dismiss\n    spendUsd\n    rates {\n      clickThrough\n      clickToConversion\n      costPerAcquisition\n    }\n  }\n": types.CampaignMetricDetailValuesFragmentDoc,
    "\n  fragment DailyValues on Performance {\n    dimensions {\n      day\n    }\n    metrics {\n      ...CampaignMetricDetailValues\n    }\n  }\n  \n": types.DailyValuesFragmentDoc,
    "\n  fragment AdSetValues on Performance {\n    dimensions {\n      adSet {\n        id\n        name\n        state\n        billingType\n      }\n    }\n    metrics {\n      ...CampaignMetricDetailValues\n    }\n  }\n  \n": types.AdSetValuesFragmentDoc,
    "\n  query analyticOverview($id: String!) {\n    campaign(id: $id) {\n      ...CampaignWithEngagements\n    }\n  }\n  \n": types.AnalyticOverviewDocument,
    "\n  query campaignMetrics($campaignIds: [String!]!) {\n    performance(filter: { campaignIds: $campaignIds }) {\n      values {\n        dimensions {\n          campaign {\n            id\n          }\n        }\n        metrics {\n          ...CampaignMetricSummaryValues\n        }\n      }\n    }\n  }\n  \n": types.CampaignMetricsDocument,
    "\n  query fetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...DailyValues\n      }\n      total {\n        metrics {\n          ...CampaignMetricDetailValues\n        }\n      }\n    }\n  }\n  \n  \n": types.FetchDailyMetricsForCampaignDocument,
    "\n  query fetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...AdSetValues\n      }\n    }\n  }\n  \n": types.FetchAdSetMetricsForCampaignDocument,
    "fragment Engagement on Engagement {\n  creativeinstanceid\n  createdat\n  type\n  pricetype\n  creativesetname\n  creativesetid\n  creativename\n  creativeid\n  creativestate\n  creativepayload\n  view\n  click\n  viewthroughConversion\n  clickthroughConversion\n  conversion\n  dismiss\n  downvote\n  landed\n  spend\n  upvote\n  downvote\n  price\n  android\n  ios\n  linux\n  macos\n  windows\n}\n\nfragment CampaignWithEngagements on Campaign {\n  id\n  name\n  state\n  budget\n  spent\n  currency\n  createdAt\n  startAt\n  endAt\n  currency\n  pacingIndex\n  format\n  adSets {\n    id\n    conversions {\n      id\n      type\n      extractExternalId\n    }\n  }\n  engagements {\n    ...Engagement\n  }\n}\n\nquery analyticOverview($id: String!) {\n  campaign(id: $id) {\n    ...CampaignWithEngagements\n  }\n}\n\nfragment CampaignMetricSummaryValues on Metrics {\n  click\n  impression\n  siteVisit\n  spendUsd\n  rates {\n    clickThrough\n  }\n}\n\nquery campaignMetrics($campaignIds: [String!]!) {\n  performance(filter: {campaignIds: $campaignIds}) {\n    values {\n      dimensions {\n        campaign {\n          id\n        }\n      }\n      metrics {\n        ...CampaignMetricSummaryValues\n      }\n    }\n  }\n}\n\nfragment CampaignMetricDetailValues on Metrics {\n  click\n  impression\n  siteVisit\n  conversion\n  dismiss\n  spendUsd\n  rates {\n    clickThrough\n    clickToConversion\n    costPerAcquisition\n  }\n}\n\nfragment DailyValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery fetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...DailyValues\n    }\n    total {\n      metrics {\n        ...CampaignMetricDetailValues\n      }\n    }\n  }\n}\n\nfragment AdSetValues on Performance {\n  dimensions {\n    adSet {\n      id\n      name\n      state\n      billingType\n    }\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery fetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...AdSetValues\n    }\n  }\n}": types.EngagementFragmentDoc,
    "\n  fragment Campaign on Campaign {\n    id\n    name\n    state\n    dailyCap\n    priority\n    passThroughRate\n    pacingOverride\n    pacingStrategy\n    externalId\n    currency\n    budget\n    spent\n    createdAt\n    startAt\n    endAt\n    source\n    type\n    format\n    paymentType\n    dayProportion\n    stripePaymentId\n    paymentType\n    hasPaymentIntent\n    dayPartings {\n      dow\n      startMinute\n      endMinute\n    }\n    geoTargets {\n      code\n      name\n    }\n    adSets {\n      ...AdSet\n    }\n    advertiser {\n      id\n    }\n  }\n  \n": types.CampaignFragmentDoc,
    "\n  fragment CampaignSummary on Campaign {\n    id\n    name\n    state\n    dailyCap\n    priority\n    passThroughRate\n    pacingOverride\n    pacingStrategy\n    externalId\n    currency\n    budget\n    paymentType\n    spent\n    createdAt\n    startAt\n    endAt\n    source\n    type\n    format\n    paymentType\n    dayProportion\n  }\n": types.CampaignSummaryFragmentDoc,
    "\n  fragment CampaignAds on Campaign {\n    id\n    name\n    state\n    startAt\n    endAt\n    source\n    currency\n    format\n    advertiser {\n      id\n    }\n    adSets {\n      ...AdSetWithDeletedAds\n    }\n  }\n  \n": types.CampaignAdsFragmentDoc,
    "\n  query LoadCampaign($id: String!) {\n    campaign(id: $id) {\n      ...Campaign\n    }\n  }\n  \n": types.LoadCampaignDocument,
    "\n  query LoadCampaignAds($id: String!) {\n    campaign(id: $id) {\n      ...CampaignAds\n    }\n  }\n  \n": types.LoadCampaignAdsDocument,
    "\n  query LoadCampaignSummary($id: String!) {\n    campaign(id: $id) {\n      ...CampaignSummary\n    }\n  }\n  \n": types.LoadCampaignSummaryDocument,
    "\n  mutation CreateCampaign($input: CreateCampaignInput!) {\n    createCampaign(createCampaignInput: $input) {\n      id\n      paymentType\n    }\n  }\n": types.CreateCampaignDocument,
    "\n  mutation UpdateCampaign($input: UpdateCampaignInput!) {\n    updateCampaign(updateCampaignInput: $input) {\n      id\n      paymentType\n      stripePaymentId\n    }\n  }\n": types.UpdateCampaignDocument,
    "fragment Campaign on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n  stripePaymentId\n  paymentType\n  hasPaymentIntent\n  dayPartings {\n    dow\n    startMinute\n    endMinute\n  }\n  geoTargets {\n    code\n    name\n  }\n  adSets {\n    ...AdSet\n  }\n  advertiser {\n    id\n  }\n}\n\nfragment CampaignSummary on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  paymentType\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n}\n\nfragment CampaignAds on Campaign {\n  id\n  name\n  state\n  startAt\n  endAt\n  source\n  currency\n  format\n  advertiser {\n    id\n  }\n  adSets {\n    ...AdSetWithDeletedAds\n  }\n}\n\nquery LoadCampaign($id: String!) {\n  campaign(id: $id) {\n    ...Campaign\n  }\n}\n\nquery LoadCampaignAds($id: String!) {\n  campaign(id: $id) {\n    ...CampaignAds\n  }\n}\n\nquery LoadCampaignSummary($id: String!) {\n  campaign(id: $id) {\n    ...CampaignSummary\n  }\n}\n\nmutation CreateCampaign($input: CreateCampaignInput!) {\n  createCampaign(createCampaignInput: $input) {\n    id\n    paymentType\n  }\n}\n\nmutation UpdateCampaign($input: UpdateCampaignInput!) {\n  updateCampaign(updateCampaignInput: $input) {\n    id\n    paymentType\n    stripePaymentId\n  }\n}": types.CampaignFragmentDoc,
    "\n  fragment Geocode on Geocode {\n    code\n    name\n  }\n": types.GeocodeFragmentDoc,
    "\n  fragment Segment on SegmentsEntry {\n    code\n    name\n  }\n": types.SegmentFragmentDoc,
    "\n  query ActiveGeocodes {\n    geocodes {\n      ...Geocode\n    }\n  }\n  \n": types.ActiveGeocodesDocument,
    "\n  query Segments {\n    segments {\n      data {\n        ...Segment\n      }\n    }\n  }\n  \n": types.SegmentsDocument,
    "fragment Geocode on Geocode {\n  code\n  name\n}\n\nfragment Segment on SegmentsEntry {\n  code\n  name\n}\n\nquery ActiveGeocodes {\n  geocodes {\n    ...Geocode\n  }\n}\n\nquery Segments {\n  segments {\n    data {\n      ...Segment\n    }\n  }\n}": types.GeocodeFragmentDoc,
    "\n  fragment Creative on Creative {\n    id\n    createdAt\n    modifiedAt\n    name\n    state\n    type {\n      code\n    }\n    payloadNotification {\n      body\n      title\n      targetUrl\n    }\n    payloadNewTabPage {\n      logo {\n        imageUrl\n        alt\n        companyName\n        destinationUrl\n      }\n      wallpapers {\n        imageUrl\n        focalPoint {\n          x\n          y\n        }\n      }\n    }\n    payloadInlineContent {\n      title\n      ctaText\n      imageUrl\n      targetUrl\n      dimensions\n      description\n    }\n    payloadNotification {\n      body\n      title\n      targetUrl\n    }\n    payloadSearch {\n      body\n      title\n      targetUrl\n    }\n    payloadSearchHomepage {\n      body\n      imageUrl\n      imageDarkModeUrl\n      targetUrl\n      title\n      ctaText\n    }\n  }\n": types.CreativeFragmentDoc,
    "\n  query advertiserCreatives($advertiserId: String!) {\n    advertiser(id: $advertiserId) {\n      id\n      creatives {\n        ...Creative\n      }\n    }\n  }\n  \n": types.AdvertiserCreativesDocument,
    "\n  mutation createCreative($input: CreativeInput!) {\n    createCreative(creative: $input) {\n      ...Creative\n    }\n  }\n  \n": types.CreateCreativeDocument,
    "\n  mutation updateCreative($id: String!, $input: CreativeInput!) {\n    updateCreative(id: $id, creative: $input) {\n      ...Creative\n    }\n  }\n  \n": types.UpdateCreativeDocument,
    "\n  query loadCreative($id: String!) {\n    creative(id: $id) {\n      ...Creative\n    }\n  }\n  \n": types.LoadCreativeDocument,
    "\n  query campaignsForCreative($creativeId: String!, $advertiserId: String!) {\n    creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n      id\n      name\n      state\n      format\n    }\n  }\n": types.CampaignsForCreativeDocument,
    "fragment Creative on Creative {\n  id\n  createdAt\n  modifiedAt\n  name\n  state\n  type {\n    code\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadNewTabPage {\n    logo {\n      imageUrl\n      alt\n      companyName\n      destinationUrl\n    }\n    wallpapers {\n      imageUrl\n      focalPoint {\n        x\n        y\n      }\n    }\n  }\n  payloadInlineContent {\n    title\n    ctaText\n    imageUrl\n    targetUrl\n    dimensions\n    description\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadSearch {\n    body\n    title\n    targetUrl\n  }\n  payloadSearchHomepage {\n    body\n    imageUrl\n    imageDarkModeUrl\n    targetUrl\n    title\n    ctaText\n  }\n}\n\nquery advertiserCreatives($advertiserId: String!) {\n  advertiser(id: $advertiserId) {\n    id\n    creatives {\n      ...Creative\n    }\n  }\n}\n\nmutation createCreative($input: CreativeInput!) {\n  createCreative(creative: $input) {\n    ...Creative\n  }\n}\n\nmutation updateCreative($id: String!, $input: CreativeInput!) {\n  updateCreative(id: $id, creative: $input) {\n    ...Creative\n  }\n}\n\nquery loadCreative($id: String!) {\n  creative(id: $id) {\n    ...Creative\n  }\n}\n\nquery campaignsForCreative($creativeId: String!, $advertiserId: String!) {\n  creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n    id\n    name\n    state\n    format\n  }\n}": types.CreativeFragmentDoc,
    "\n  query validateTargetUrl($url: String!) {\n    validateTargetUrl(targetUrl: $url) {\n      isValid\n      redirects {\n        url\n        violations {\n          summary\n          detail\n        }\n      }\n    }\n  }\n": types.ValidateTargetUrlDocument,
    "query validateTargetUrl($url: String!) {\n  validateTargetUrl(targetUrl: $url) {\n    isValid\n    redirects {\n      url\n      violations {\n        summary\n        detail\n      }\n    }\n  }\n}": types.ValidateTargetUrlDocument,
    "\n  fragment User on User {\n    email\n    fullName\n    id\n    role\n  }\n": types.UserFragmentDoc,
    "\n  query LoadUser($id: String!) {\n    user(id: $id) {\n      ...User\n    }\n  }\n  \n": types.LoadUserDocument,
    "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(updateUserInput: $input) {\n      ...User\n    }\n  }\n  \n": types.UpdateUserDocument,
    "fragment User on User {\n  email\n  fullName\n  id\n  role\n}\n\nquery LoadUser($id: String!) {\n  user(id: $id) {\n    ...User\n  }\n}\n\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(updateUserInput: $input) {\n    ...User\n  }\n}": types.UserFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Ad on Ad {\n    id\n    state\n    price\n    priceType\n    creative {\n      ...Creative\n    }\n  }\n  \n"): (typeof documents)["\n  fragment Ad on Ad {\n    id\n    state\n    price\n    priceType\n    creative {\n      ...Creative\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdSet on AdSet {\n    id\n    price\n    createdAt\n    billingType\n    name\n    totalMax\n    perDay\n    state\n    segments {\n      code\n      name\n    }\n    oses {\n      code\n      name\n    }\n    conversions {\n      id\n      type\n      urlPattern\n      observationWindow\n    }\n    ads {\n      ...Ad\n    }\n  }\n  \n"): (typeof documents)["\n  fragment AdSet on AdSet {\n    id\n    price\n    createdAt\n    billingType\n    name\n    totalMax\n    perDay\n    state\n    segments {\n      code\n      name\n    }\n    oses {\n      code\n      name\n    }\n    conversions {\n      id\n      type\n      urlPattern\n      observationWindow\n    }\n    ads {\n      ...Ad\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdSetWithDeletedAds on AdSet {\n    id\n    createdAt\n    name\n    state\n    billingType\n    oses {\n      code\n      name\n    }\n    segments {\n      code\n      name\n    }\n    conversions {\n      id\n    }\n    ads(includeDeleted: true) {\n      ...Ad\n    }\n  }\n  \n"): (typeof documents)["\n  fragment AdSetWithDeletedAds on AdSet {\n    id\n    createdAt\n    name\n    state\n    billingType\n    oses {\n      code\n      name\n    }\n    segments {\n      code\n      name\n    }\n    conversions {\n      id\n    }\n    ads(includeDeleted: true) {\n      ...Ad\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createAdSet($createAdSetInput: CreateAdSetInput!) {\n    createAdSet(createAdSetInput: $createAdSetInput) {\n      ...AdSet\n    }\n  }\n  \n"): (typeof documents)["\n  mutation createAdSet($createAdSetInput: CreateAdSetInput!) {\n    createAdSet(createAdSetInput: $createAdSetInput) {\n      ...AdSet\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateAdSet($updateAdSetInput: UpdateAdSetInput!) {\n    updateAdSet(updateAdSetInput: $updateAdSetInput) {\n      ...AdSet\n    }\n  }\n  \n"): (typeof documents)["\n  mutation updateAdSet($updateAdSetInput: UpdateAdSetInput!) {\n    updateAdSet(updateAdSetInput: $updateAdSetInput) {\n      ...AdSet\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AdSet on AdSet {\n  id\n  price\n  createdAt\n  billingType\n  name\n  totalMax\n  perDay\n  state\n  segments {\n    code\n    name\n  }\n  oses {\n    code\n    name\n  }\n  conversions {\n    id\n    type\n    urlPattern\n    observationWindow\n  }\n  ads {\n    ...Ad\n  }\n}\n\nfragment Ad on Ad {\n  id\n  state\n  price\n  priceType\n  creative {\n    ...Creative\n  }\n}\n\nfragment AdSetWithDeletedAds on AdSet {\n  id\n  createdAt\n  name\n  state\n  billingType\n  oses {\n    code\n    name\n  }\n  segments {\n    code\n    name\n  }\n  conversions {\n    id\n  }\n  ads(includeDeleted: true) {\n    ...Ad\n  }\n}\n\nmutation createAdSet($createAdSetInput: CreateAdSetInput!) {\n  createAdSet(createAdSetInput: $createAdSetInput) {\n    ...AdSet\n  }\n}\n\nmutation updateAdSet($updateAdSetInput: UpdateAdSetInput!) {\n  updateAdSet(updateAdSetInput: $updateAdSetInput) {\n    ...AdSet\n  }\n}"): (typeof documents)["fragment AdSet on AdSet {\n  id\n  price\n  createdAt\n  billingType\n  name\n  totalMax\n  perDay\n  state\n  segments {\n    code\n    name\n  }\n  oses {\n    code\n    name\n  }\n  conversions {\n    id\n    type\n    urlPattern\n    observationWindow\n  }\n  ads {\n    ...Ad\n  }\n}\n\nfragment Ad on Ad {\n  id\n  state\n  price\n  priceType\n  creative {\n    ...Creative\n  }\n}\n\nfragment AdSetWithDeletedAds on AdSet {\n  id\n  createdAt\n  name\n  state\n  billingType\n  oses {\n    code\n    name\n  }\n  segments {\n    code\n    name\n  }\n  conversions {\n    id\n  }\n  ads(includeDeleted: true) {\n    ...Ad\n  }\n}\n\nmutation createAdSet($createAdSetInput: CreateAdSetInput!) {\n  createAdSet(createAdSetInput: $createAdSetInput) {\n    ...AdSet\n  }\n}\n\nmutation updateAdSet($updateAdSetInput: UpdateAdSetInput!) {\n  updateAdSet(updateAdSetInput: $updateAdSetInput) {\n    ...AdSet\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdvertiserBillingAddress on Advertiser {\n    billingAddress {\n      id\n      street1\n      street2\n      city\n      country\n      state\n      zipcode\n    }\n  }\n"): (typeof documents)["\n  fragment AdvertiserBillingAddress on Advertiser {\n    billingAddress {\n      id\n      street1\n      street2\n      city\n      country\n      state\n      zipcode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdvertiserSummary on Advertiser {\n    id\n    name\n    state\n    billingEmail\n    additionalBillingEmails\n    createdAt\n    modifiedAt\n    publicKey\n  }\n"): (typeof documents)["\n  fragment AdvertiserSummary on Advertiser {\n    id\n    name\n    state\n    billingEmail\n    additionalBillingEmails\n    createdAt\n    modifiedAt\n    publicKey\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Advertiser on Advertiser {\n    ...AdvertiserSummary\n    referrer\n    phone\n    selfServiceManageCampaign\n    selfServiceSetPrice\n  }\n  \n"): (typeof documents)["\n  fragment Advertiser on Advertiser {\n    ...AdvertiserSummary\n    referrer\n    phone\n    selfServiceManageCampaign\n    selfServiceSetPrice\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdvertiserCampaigns on Advertiser {\n    id\n    name\n    selfServiceManageCampaign\n    selfServiceSetPrice\n    campaigns {\n      ...CampaignSummary\n    }\n  }\n  \n"): (typeof documents)["\n  fragment AdvertiserCampaigns on Advertiser {\n    id\n    name\n    selfServiceManageCampaign\n    selfServiceSetPrice\n    campaigns {\n      ...CampaignSummary\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdvertiserImage on AdvertiserImage {\n    name\n    imageUrl\n    format\n    id\n    createdAt\n  }\n"): (typeof documents)["\n  fragment AdvertiserImage on AdvertiserImage {\n    name\n    imageUrl\n    format\n    id\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdvertiserPrice on AdvertiserPrice {\n    billingModelPrice\n    billingType\n    format\n  }\n"): (typeof documents)["\n  fragment AdvertiserPrice on AdvertiserPrice {\n    billingModelPrice\n    billingType\n    format\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query advertiser($id: String!) {\n    advertiser(id: $id) {\n      id\n      publicKey\n    }\n  }\n"): (typeof documents)["\n  query advertiser($id: String!) {\n    advertiser(id: $id) {\n      id\n      publicKey\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateAdvertiser($updateAdvertiserInput: UpdateAdvertiserInput!) {\n    updateAdvertiser(updateAdvertiserInput: $updateAdvertiserInput) {\n      id\n      publicKey\n    }\n  }\n"): (typeof documents)["\n  mutation updateAdvertiser($updateAdvertiserInput: UpdateAdvertiserInput!) {\n    updateAdvertiser(updateAdvertiserInput: $updateAdvertiserInput) {\n      id\n      publicKey\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query advertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n    advertiserCampaigns(id: $id, filter: $filter) {\n      ...AdvertiserCampaigns\n    }\n  }\n  \n"): (typeof documents)["\n  query advertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n    advertiserCampaigns(id: $id, filter: $filter) {\n      ...AdvertiserCampaigns\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query advertiserImages($id: String!) {\n    advertiser(id: $id) {\n      images {\n        ...AdvertiserImage\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query advertiserImages($id: String!) {\n    advertiser(id: $id) {\n      images {\n        ...AdvertiserImage\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query advertiserPrices($id: String!) {\n    advertiser(id: $id) {\n      prices {\n        ...AdvertiserPrice\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query advertiserPrices($id: String!) {\n    advertiser(id: $id) {\n      prices {\n        ...AdvertiserPrice\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query advertiserBillingAddress($id: String!) {\n    advertiser(id: $id) {\n      id\n      ...AdvertiserBillingAddress\n    }\n  }\n  \n"): (typeof documents)["\n  query advertiserBillingAddress($id: String!) {\n    advertiser(id: $id) {\n      id\n      ...AdvertiserBillingAddress\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation uploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n    createAdvertiserImage(createImageInput: $input) {\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation uploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n    createAdvertiserImage(createImageInput: $input) {\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AdvertiserSummary on Advertiser {\n  id\n  name\n  state\n  billingEmail\n  additionalBillingEmails\n  createdAt\n  modifiedAt\n  publicKey\n}\n\nfragment AdvertiserBillingAddress on Advertiser {\n  billingAddress {\n    id\n    street1\n    street2\n    city\n    country\n    state\n    zipcode\n  }\n}\n\nfragment Advertiser on Advertiser {\n  ...AdvertiserSummary\n  referrer\n  phone\n  selfServiceManageCampaign\n  selfServiceSetPrice\n}\n\nquery advertiser($id: String!) {\n  advertiser(id: $id) {\n    id\n    publicKey\n  }\n}\n\nmutation updateAdvertiser($updateAdvertiserInput: UpdateAdvertiserInput!) {\n  updateAdvertiser(updateAdvertiserInput: $updateAdvertiserInput) {\n    id\n    publicKey\n  }\n}\n\nfragment AdvertiserCampaigns on Advertiser {\n  id\n  name\n  selfServiceManageCampaign\n  selfServiceSetPrice\n  campaigns {\n    ...CampaignSummary\n  }\n}\n\nquery advertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n  advertiserCampaigns(id: $id, filter: $filter) {\n    ...AdvertiserCampaigns\n  }\n}\n\nfragment AdvertiserImage on AdvertiserImage {\n  name\n  imageUrl\n  format\n  id\n  createdAt\n}\n\nfragment AdvertiserPrice on AdvertiserPrice {\n  billingModelPrice\n  billingType\n  format\n}\n\nquery advertiserImages($id: String!) {\n  advertiser(id: $id) {\n    images {\n      ...AdvertiserImage\n    }\n  }\n}\n\nquery advertiserPrices($id: String!) {\n  advertiser(id: $id) {\n    prices {\n      ...AdvertiserPrice\n    }\n  }\n}\n\nquery advertiserBillingAddress($id: String!) {\n  advertiser(id: $id) {\n    id\n    ...AdvertiserBillingAddress\n  }\n}\n\nmutation uploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n  createAdvertiserImage(createImageInput: $input) {\n    name\n  }\n}"): (typeof documents)["fragment AdvertiserSummary on Advertiser {\n  id\n  name\n  state\n  billingEmail\n  additionalBillingEmails\n  createdAt\n  modifiedAt\n  publicKey\n}\n\nfragment AdvertiserBillingAddress on Advertiser {\n  billingAddress {\n    id\n    street1\n    street2\n    city\n    country\n    state\n    zipcode\n  }\n}\n\nfragment Advertiser on Advertiser {\n  ...AdvertiserSummary\n  referrer\n  phone\n  selfServiceManageCampaign\n  selfServiceSetPrice\n}\n\nquery advertiser($id: String!) {\n  advertiser(id: $id) {\n    id\n    publicKey\n  }\n}\n\nmutation updateAdvertiser($updateAdvertiserInput: UpdateAdvertiserInput!) {\n  updateAdvertiser(updateAdvertiserInput: $updateAdvertiserInput) {\n    id\n    publicKey\n  }\n}\n\nfragment AdvertiserCampaigns on Advertiser {\n  id\n  name\n  selfServiceManageCampaign\n  selfServiceSetPrice\n  campaigns {\n    ...CampaignSummary\n  }\n}\n\nquery advertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n  advertiserCampaigns(id: $id, filter: $filter) {\n    ...AdvertiserCampaigns\n  }\n}\n\nfragment AdvertiserImage on AdvertiserImage {\n  name\n  imageUrl\n  format\n  id\n  createdAt\n}\n\nfragment AdvertiserPrice on AdvertiserPrice {\n  billingModelPrice\n  billingType\n  format\n}\n\nquery advertiserImages($id: String!) {\n  advertiser(id: $id) {\n    images {\n      ...AdvertiserImage\n    }\n  }\n}\n\nquery advertiserPrices($id: String!) {\n  advertiser(id: $id) {\n    prices {\n      ...AdvertiserPrice\n    }\n  }\n}\n\nquery advertiserBillingAddress($id: String!) {\n  advertiser(id: $id) {\n    id\n    ...AdvertiserBillingAddress\n  }\n}\n\nmutation uploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n  createAdvertiserImage(createImageInput: $input) {\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Engagement on Engagement {\n    creativeinstanceid\n    createdat\n    type\n    pricetype\n    creativesetname\n    creativesetid\n    creativename\n    creativeid\n    creativestate\n    creativepayload\n    view\n    click\n    viewthroughConversion\n    clickthroughConversion\n    conversion\n    dismiss\n    downvote\n    landed\n    spend\n    upvote\n    downvote\n    price\n    android\n    ios\n    linux\n    macos\n    windows\n  }\n"): (typeof documents)["\n  fragment Engagement on Engagement {\n    creativeinstanceid\n    createdat\n    type\n    pricetype\n    creativesetname\n    creativesetid\n    creativename\n    creativeid\n    creativestate\n    creativepayload\n    view\n    click\n    viewthroughConversion\n    clickthroughConversion\n    conversion\n    dismiss\n    downvote\n    landed\n    spend\n    upvote\n    downvote\n    price\n    android\n    ios\n    linux\n    macos\n    windows\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CampaignWithEngagements on Campaign {\n    id\n    name\n    state\n    budget\n    spent\n    currency\n    createdAt\n    startAt\n    endAt\n    currency\n    pacingIndex\n    format\n    adSets {\n      id\n      conversions {\n        id\n        type\n        extractExternalId\n      }\n    }\n    engagements {\n      ...Engagement\n    }\n  }\n  \n"): (typeof documents)["\n  fragment CampaignWithEngagements on Campaign {\n    id\n    name\n    state\n    budget\n    spent\n    currency\n    createdAt\n    startAt\n    endAt\n    currency\n    pacingIndex\n    format\n    adSets {\n      id\n      conversions {\n        id\n        type\n        extractExternalId\n      }\n    }\n    engagements {\n      ...Engagement\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CampaignMetricSummaryValues on Metrics {\n    click\n    impression\n    siteVisit\n    spendUsd\n    rates {\n      clickThrough\n    }\n  }\n"): (typeof documents)["\n  fragment CampaignMetricSummaryValues on Metrics {\n    click\n    impression\n    siteVisit\n    spendUsd\n    rates {\n      clickThrough\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CampaignMetricDetailValues on Metrics {\n    click\n    impression\n    siteVisit\n    conversion\n    dismiss\n    spendUsd\n    rates {\n      clickThrough\n      clickToConversion\n      costPerAcquisition\n    }\n  }\n"): (typeof documents)["\n  fragment CampaignMetricDetailValues on Metrics {\n    click\n    impression\n    siteVisit\n    conversion\n    dismiss\n    spendUsd\n    rates {\n      clickThrough\n      clickToConversion\n      costPerAcquisition\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DailyValues on Performance {\n    dimensions {\n      day\n    }\n    metrics {\n      ...CampaignMetricDetailValues\n    }\n  }\n  \n"): (typeof documents)["\n  fragment DailyValues on Performance {\n    dimensions {\n      day\n    }\n    metrics {\n      ...CampaignMetricDetailValues\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdSetValues on Performance {\n    dimensions {\n      adSet {\n        id\n        name\n        state\n        billingType\n      }\n    }\n    metrics {\n      ...CampaignMetricDetailValues\n    }\n  }\n  \n"): (typeof documents)["\n  fragment AdSetValues on Performance {\n    dimensions {\n      adSet {\n        id\n        name\n        state\n        billingType\n      }\n    }\n    metrics {\n      ...CampaignMetricDetailValues\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query analyticOverview($id: String!) {\n    campaign(id: $id) {\n      ...CampaignWithEngagements\n    }\n  }\n  \n"): (typeof documents)["\n  query analyticOverview($id: String!) {\n    campaign(id: $id) {\n      ...CampaignWithEngagements\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campaignMetrics($campaignIds: [String!]!) {\n    performance(filter: { campaignIds: $campaignIds }) {\n      values {\n        dimensions {\n          campaign {\n            id\n          }\n        }\n        metrics {\n          ...CampaignMetricSummaryValues\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query campaignMetrics($campaignIds: [String!]!) {\n    performance(filter: { campaignIds: $campaignIds }) {\n      values {\n        dimensions {\n          campaign {\n            id\n          }\n        }\n        metrics {\n          ...CampaignMetricSummaryValues\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...DailyValues\n      }\n      total {\n        metrics {\n          ...CampaignMetricDetailValues\n        }\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query fetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...DailyValues\n      }\n      total {\n        metrics {\n          ...CampaignMetricDetailValues\n        }\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...AdSetValues\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query fetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...AdSetValues\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Engagement on Engagement {\n  creativeinstanceid\n  createdat\n  type\n  pricetype\n  creativesetname\n  creativesetid\n  creativename\n  creativeid\n  creativestate\n  creativepayload\n  view\n  click\n  viewthroughConversion\n  clickthroughConversion\n  conversion\n  dismiss\n  downvote\n  landed\n  spend\n  upvote\n  downvote\n  price\n  android\n  ios\n  linux\n  macos\n  windows\n}\n\nfragment CampaignWithEngagements on Campaign {\n  id\n  name\n  state\n  budget\n  spent\n  currency\n  createdAt\n  startAt\n  endAt\n  currency\n  pacingIndex\n  format\n  adSets {\n    id\n    conversions {\n      id\n      type\n      extractExternalId\n    }\n  }\n  engagements {\n    ...Engagement\n  }\n}\n\nquery analyticOverview($id: String!) {\n  campaign(id: $id) {\n    ...CampaignWithEngagements\n  }\n}\n\nfragment CampaignMetricSummaryValues on Metrics {\n  click\n  impression\n  siteVisit\n  spendUsd\n  rates {\n    clickThrough\n  }\n}\n\nquery campaignMetrics($campaignIds: [String!]!) {\n  performance(filter: {campaignIds: $campaignIds}) {\n    values {\n      dimensions {\n        campaign {\n          id\n        }\n      }\n      metrics {\n        ...CampaignMetricSummaryValues\n      }\n    }\n  }\n}\n\nfragment CampaignMetricDetailValues on Metrics {\n  click\n  impression\n  siteVisit\n  conversion\n  dismiss\n  spendUsd\n  rates {\n    clickThrough\n    clickToConversion\n    costPerAcquisition\n  }\n}\n\nfragment DailyValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery fetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...DailyValues\n    }\n    total {\n      metrics {\n        ...CampaignMetricDetailValues\n      }\n    }\n  }\n}\n\nfragment AdSetValues on Performance {\n  dimensions {\n    adSet {\n      id\n      name\n      state\n      billingType\n    }\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery fetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...AdSetValues\n    }\n  }\n}"): (typeof documents)["fragment Engagement on Engagement {\n  creativeinstanceid\n  createdat\n  type\n  pricetype\n  creativesetname\n  creativesetid\n  creativename\n  creativeid\n  creativestate\n  creativepayload\n  view\n  click\n  viewthroughConversion\n  clickthroughConversion\n  conversion\n  dismiss\n  downvote\n  landed\n  spend\n  upvote\n  downvote\n  price\n  android\n  ios\n  linux\n  macos\n  windows\n}\n\nfragment CampaignWithEngagements on Campaign {\n  id\n  name\n  state\n  budget\n  spent\n  currency\n  createdAt\n  startAt\n  endAt\n  currency\n  pacingIndex\n  format\n  adSets {\n    id\n    conversions {\n      id\n      type\n      extractExternalId\n    }\n  }\n  engagements {\n    ...Engagement\n  }\n}\n\nquery analyticOverview($id: String!) {\n  campaign(id: $id) {\n    ...CampaignWithEngagements\n  }\n}\n\nfragment CampaignMetricSummaryValues on Metrics {\n  click\n  impression\n  siteVisit\n  spendUsd\n  rates {\n    clickThrough\n  }\n}\n\nquery campaignMetrics($campaignIds: [String!]!) {\n  performance(filter: {campaignIds: $campaignIds}) {\n    values {\n      dimensions {\n        campaign {\n          id\n        }\n      }\n      metrics {\n        ...CampaignMetricSummaryValues\n      }\n    }\n  }\n}\n\nfragment CampaignMetricDetailValues on Metrics {\n  click\n  impression\n  siteVisit\n  conversion\n  dismiss\n  spendUsd\n  rates {\n    clickThrough\n    clickToConversion\n    costPerAcquisition\n  }\n}\n\nfragment DailyValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery fetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...DailyValues\n    }\n    total {\n      metrics {\n        ...CampaignMetricDetailValues\n      }\n    }\n  }\n}\n\nfragment AdSetValues on Performance {\n  dimensions {\n    adSet {\n      id\n      name\n      state\n      billingType\n    }\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery fetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...AdSetValues\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Campaign on Campaign {\n    id\n    name\n    state\n    dailyCap\n    priority\n    passThroughRate\n    pacingOverride\n    pacingStrategy\n    externalId\n    currency\n    budget\n    spent\n    createdAt\n    startAt\n    endAt\n    source\n    type\n    format\n    paymentType\n    dayProportion\n    stripePaymentId\n    paymentType\n    hasPaymentIntent\n    dayPartings {\n      dow\n      startMinute\n      endMinute\n    }\n    geoTargets {\n      code\n      name\n    }\n    adSets {\n      ...AdSet\n    }\n    advertiser {\n      id\n    }\n  }\n  \n"): (typeof documents)["\n  fragment Campaign on Campaign {\n    id\n    name\n    state\n    dailyCap\n    priority\n    passThroughRate\n    pacingOverride\n    pacingStrategy\n    externalId\n    currency\n    budget\n    spent\n    createdAt\n    startAt\n    endAt\n    source\n    type\n    format\n    paymentType\n    dayProportion\n    stripePaymentId\n    paymentType\n    hasPaymentIntent\n    dayPartings {\n      dow\n      startMinute\n      endMinute\n    }\n    geoTargets {\n      code\n      name\n    }\n    adSets {\n      ...AdSet\n    }\n    advertiser {\n      id\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CampaignSummary on Campaign {\n    id\n    name\n    state\n    dailyCap\n    priority\n    passThroughRate\n    pacingOverride\n    pacingStrategy\n    externalId\n    currency\n    budget\n    paymentType\n    spent\n    createdAt\n    startAt\n    endAt\n    source\n    type\n    format\n    paymentType\n    dayProportion\n  }\n"): (typeof documents)["\n  fragment CampaignSummary on Campaign {\n    id\n    name\n    state\n    dailyCap\n    priority\n    passThroughRate\n    pacingOverride\n    pacingStrategy\n    externalId\n    currency\n    budget\n    paymentType\n    spent\n    createdAt\n    startAt\n    endAt\n    source\n    type\n    format\n    paymentType\n    dayProportion\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CampaignAds on Campaign {\n    id\n    name\n    state\n    startAt\n    endAt\n    source\n    currency\n    format\n    advertiser {\n      id\n    }\n    adSets {\n      ...AdSetWithDeletedAds\n    }\n  }\n  \n"): (typeof documents)["\n  fragment CampaignAds on Campaign {\n    id\n    name\n    state\n    startAt\n    endAt\n    source\n    currency\n    format\n    advertiser {\n      id\n    }\n    adSets {\n      ...AdSetWithDeletedAds\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LoadCampaign($id: String!) {\n    campaign(id: $id) {\n      ...Campaign\n    }\n  }\n  \n"): (typeof documents)["\n  query LoadCampaign($id: String!) {\n    campaign(id: $id) {\n      ...Campaign\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LoadCampaignAds($id: String!) {\n    campaign(id: $id) {\n      ...CampaignAds\n    }\n  }\n  \n"): (typeof documents)["\n  query LoadCampaignAds($id: String!) {\n    campaign(id: $id) {\n      ...CampaignAds\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LoadCampaignSummary($id: String!) {\n    campaign(id: $id) {\n      ...CampaignSummary\n    }\n  }\n  \n"): (typeof documents)["\n  query LoadCampaignSummary($id: String!) {\n    campaign(id: $id) {\n      ...CampaignSummary\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCampaign($input: CreateCampaignInput!) {\n    createCampaign(createCampaignInput: $input) {\n      id\n      paymentType\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCampaign($input: CreateCampaignInput!) {\n    createCampaign(createCampaignInput: $input) {\n      id\n      paymentType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCampaign($input: UpdateCampaignInput!) {\n    updateCampaign(updateCampaignInput: $input) {\n      id\n      paymentType\n      stripePaymentId\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCampaign($input: UpdateCampaignInput!) {\n    updateCampaign(updateCampaignInput: $input) {\n      id\n      paymentType\n      stripePaymentId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Campaign on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n  stripePaymentId\n  paymentType\n  hasPaymentIntent\n  dayPartings {\n    dow\n    startMinute\n    endMinute\n  }\n  geoTargets {\n    code\n    name\n  }\n  adSets {\n    ...AdSet\n  }\n  advertiser {\n    id\n  }\n}\n\nfragment CampaignSummary on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  paymentType\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n}\n\nfragment CampaignAds on Campaign {\n  id\n  name\n  state\n  startAt\n  endAt\n  source\n  currency\n  format\n  advertiser {\n    id\n  }\n  adSets {\n    ...AdSetWithDeletedAds\n  }\n}\n\nquery LoadCampaign($id: String!) {\n  campaign(id: $id) {\n    ...Campaign\n  }\n}\n\nquery LoadCampaignAds($id: String!) {\n  campaign(id: $id) {\n    ...CampaignAds\n  }\n}\n\nquery LoadCampaignSummary($id: String!) {\n  campaign(id: $id) {\n    ...CampaignSummary\n  }\n}\n\nmutation CreateCampaign($input: CreateCampaignInput!) {\n  createCampaign(createCampaignInput: $input) {\n    id\n    paymentType\n  }\n}\n\nmutation UpdateCampaign($input: UpdateCampaignInput!) {\n  updateCampaign(updateCampaignInput: $input) {\n    id\n    paymentType\n    stripePaymentId\n  }\n}"): (typeof documents)["fragment Campaign on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n  stripePaymentId\n  paymentType\n  hasPaymentIntent\n  dayPartings {\n    dow\n    startMinute\n    endMinute\n  }\n  geoTargets {\n    code\n    name\n  }\n  adSets {\n    ...AdSet\n  }\n  advertiser {\n    id\n  }\n}\n\nfragment CampaignSummary on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  paymentType\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n}\n\nfragment CampaignAds on Campaign {\n  id\n  name\n  state\n  startAt\n  endAt\n  source\n  currency\n  format\n  advertiser {\n    id\n  }\n  adSets {\n    ...AdSetWithDeletedAds\n  }\n}\n\nquery LoadCampaign($id: String!) {\n  campaign(id: $id) {\n    ...Campaign\n  }\n}\n\nquery LoadCampaignAds($id: String!) {\n  campaign(id: $id) {\n    ...CampaignAds\n  }\n}\n\nquery LoadCampaignSummary($id: String!) {\n  campaign(id: $id) {\n    ...CampaignSummary\n  }\n}\n\nmutation CreateCampaign($input: CreateCampaignInput!) {\n  createCampaign(createCampaignInput: $input) {\n    id\n    paymentType\n  }\n}\n\nmutation UpdateCampaign($input: UpdateCampaignInput!) {\n  updateCampaign(updateCampaignInput: $input) {\n    id\n    paymentType\n    stripePaymentId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Geocode on Geocode {\n    code\n    name\n  }\n"): (typeof documents)["\n  fragment Geocode on Geocode {\n    code\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Segment on SegmentsEntry {\n    code\n    name\n  }\n"): (typeof documents)["\n  fragment Segment on SegmentsEntry {\n    code\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ActiveGeocodes {\n    geocodes {\n      ...Geocode\n    }\n  }\n  \n"): (typeof documents)["\n  query ActiveGeocodes {\n    geocodes {\n      ...Geocode\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Segments {\n    segments {\n      data {\n        ...Segment\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query Segments {\n    segments {\n      data {\n        ...Segment\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Geocode on Geocode {\n  code\n  name\n}\n\nfragment Segment on SegmentsEntry {\n  code\n  name\n}\n\nquery ActiveGeocodes {\n  geocodes {\n    ...Geocode\n  }\n}\n\nquery Segments {\n  segments {\n    data {\n      ...Segment\n    }\n  }\n}"): (typeof documents)["fragment Geocode on Geocode {\n  code\n  name\n}\n\nfragment Segment on SegmentsEntry {\n  code\n  name\n}\n\nquery ActiveGeocodes {\n  geocodes {\n    ...Geocode\n  }\n}\n\nquery Segments {\n  segments {\n    data {\n      ...Segment\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Creative on Creative {\n    id\n    createdAt\n    modifiedAt\n    name\n    state\n    type {\n      code\n    }\n    payloadNotification {\n      body\n      title\n      targetUrl\n    }\n    payloadNewTabPage {\n      logo {\n        imageUrl\n        alt\n        companyName\n        destinationUrl\n      }\n      wallpapers {\n        imageUrl\n        focalPoint {\n          x\n          y\n        }\n      }\n    }\n    payloadInlineContent {\n      title\n      ctaText\n      imageUrl\n      targetUrl\n      dimensions\n      description\n    }\n    payloadNotification {\n      body\n      title\n      targetUrl\n    }\n    payloadSearch {\n      body\n      title\n      targetUrl\n    }\n    payloadSearchHomepage {\n      body\n      imageUrl\n      imageDarkModeUrl\n      targetUrl\n      title\n      ctaText\n    }\n  }\n"): (typeof documents)["\n  fragment Creative on Creative {\n    id\n    createdAt\n    modifiedAt\n    name\n    state\n    type {\n      code\n    }\n    payloadNotification {\n      body\n      title\n      targetUrl\n    }\n    payloadNewTabPage {\n      logo {\n        imageUrl\n        alt\n        companyName\n        destinationUrl\n      }\n      wallpapers {\n        imageUrl\n        focalPoint {\n          x\n          y\n        }\n      }\n    }\n    payloadInlineContent {\n      title\n      ctaText\n      imageUrl\n      targetUrl\n      dimensions\n      description\n    }\n    payloadNotification {\n      body\n      title\n      targetUrl\n    }\n    payloadSearch {\n      body\n      title\n      targetUrl\n    }\n    payloadSearchHomepage {\n      body\n      imageUrl\n      imageDarkModeUrl\n      targetUrl\n      title\n      ctaText\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query advertiserCreatives($advertiserId: String!) {\n    advertiser(id: $advertiserId) {\n      id\n      creatives {\n        ...Creative\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query advertiserCreatives($advertiserId: String!) {\n    advertiser(id: $advertiserId) {\n      id\n      creatives {\n        ...Creative\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createCreative($input: CreativeInput!) {\n    createCreative(creative: $input) {\n      ...Creative\n    }\n  }\n  \n"): (typeof documents)["\n  mutation createCreative($input: CreativeInput!) {\n    createCreative(creative: $input) {\n      ...Creative\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateCreative($id: String!, $input: CreativeInput!) {\n    updateCreative(id: $id, creative: $input) {\n      ...Creative\n    }\n  }\n  \n"): (typeof documents)["\n  mutation updateCreative($id: String!, $input: CreativeInput!) {\n    updateCreative(id: $id, creative: $input) {\n      ...Creative\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query loadCreative($id: String!) {\n    creative(id: $id) {\n      ...Creative\n    }\n  }\n  \n"): (typeof documents)["\n  query loadCreative($id: String!) {\n    creative(id: $id) {\n      ...Creative\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query campaignsForCreative($creativeId: String!, $advertiserId: String!) {\n    creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n      id\n      name\n      state\n      format\n    }\n  }\n"): (typeof documents)["\n  query campaignsForCreative($creativeId: String!, $advertiserId: String!) {\n    creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n      id\n      name\n      state\n      format\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Creative on Creative {\n  id\n  createdAt\n  modifiedAt\n  name\n  state\n  type {\n    code\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadNewTabPage {\n    logo {\n      imageUrl\n      alt\n      companyName\n      destinationUrl\n    }\n    wallpapers {\n      imageUrl\n      focalPoint {\n        x\n        y\n      }\n    }\n  }\n  payloadInlineContent {\n    title\n    ctaText\n    imageUrl\n    targetUrl\n    dimensions\n    description\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadSearch {\n    body\n    title\n    targetUrl\n  }\n  payloadSearchHomepage {\n    body\n    imageUrl\n    imageDarkModeUrl\n    targetUrl\n    title\n    ctaText\n  }\n}\n\nquery advertiserCreatives($advertiserId: String!) {\n  advertiser(id: $advertiserId) {\n    id\n    creatives {\n      ...Creative\n    }\n  }\n}\n\nmutation createCreative($input: CreativeInput!) {\n  createCreative(creative: $input) {\n    ...Creative\n  }\n}\n\nmutation updateCreative($id: String!, $input: CreativeInput!) {\n  updateCreative(id: $id, creative: $input) {\n    ...Creative\n  }\n}\n\nquery loadCreative($id: String!) {\n  creative(id: $id) {\n    ...Creative\n  }\n}\n\nquery campaignsForCreative($creativeId: String!, $advertiserId: String!) {\n  creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n    id\n    name\n    state\n    format\n  }\n}"): (typeof documents)["fragment Creative on Creative {\n  id\n  createdAt\n  modifiedAt\n  name\n  state\n  type {\n    code\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadNewTabPage {\n    logo {\n      imageUrl\n      alt\n      companyName\n      destinationUrl\n    }\n    wallpapers {\n      imageUrl\n      focalPoint {\n        x\n        y\n      }\n    }\n  }\n  payloadInlineContent {\n    title\n    ctaText\n    imageUrl\n    targetUrl\n    dimensions\n    description\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadSearch {\n    body\n    title\n    targetUrl\n  }\n  payloadSearchHomepage {\n    body\n    imageUrl\n    imageDarkModeUrl\n    targetUrl\n    title\n    ctaText\n  }\n}\n\nquery advertiserCreatives($advertiserId: String!) {\n  advertiser(id: $advertiserId) {\n    id\n    creatives {\n      ...Creative\n    }\n  }\n}\n\nmutation createCreative($input: CreativeInput!) {\n  createCreative(creative: $input) {\n    ...Creative\n  }\n}\n\nmutation updateCreative($id: String!, $input: CreativeInput!) {\n  updateCreative(id: $id, creative: $input) {\n    ...Creative\n  }\n}\n\nquery loadCreative($id: String!) {\n  creative(id: $id) {\n    ...Creative\n  }\n}\n\nquery campaignsForCreative($creativeId: String!, $advertiserId: String!) {\n  creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n    id\n    name\n    state\n    format\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query validateTargetUrl($url: String!) {\n    validateTargetUrl(targetUrl: $url) {\n      isValid\n      redirects {\n        url\n        violations {\n          summary\n          detail\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query validateTargetUrl($url: String!) {\n    validateTargetUrl(targetUrl: $url) {\n      isValid\n      redirects {\n        url\n        violations {\n          summary\n          detail\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query validateTargetUrl($url: String!) {\n  validateTargetUrl(targetUrl: $url) {\n    isValid\n    redirects {\n      url\n      violations {\n        summary\n        detail\n      }\n    }\n  }\n}"): (typeof documents)["query validateTargetUrl($url: String!) {\n  validateTargetUrl(targetUrl: $url) {\n    isValid\n    redirects {\n      url\n      violations {\n        summary\n        detail\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment User on User {\n    email\n    fullName\n    id\n    role\n  }\n"): (typeof documents)["\n  fragment User on User {\n    email\n    fullName\n    id\n    role\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LoadUser($id: String!) {\n    user(id: $id) {\n      ...User\n    }\n  }\n  \n"): (typeof documents)["\n  query LoadUser($id: String!) {\n    user(id: $id) {\n      ...User\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(updateUserInput: $input) {\n      ...User\n    }\n  }\n  \n"): (typeof documents)["\n  mutation UpdateUser($input: UpdateUserInput!) {\n    updateUser(updateUserInput: $input) {\n      ...User\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment User on User {\n  email\n  fullName\n  id\n  role\n}\n\nquery LoadUser($id: String!) {\n  user(id: $id) {\n    ...User\n  }\n}\n\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(updateUserInput: $input) {\n    ...User\n  }\n}"): (typeof documents)["fragment User on User {\n  email\n  fullName\n  id\n  role\n}\n\nquery LoadUser($id: String!) {\n  user(id: $id) {\n    ...User\n  }\n}\n\nmutation UpdateUser($input: UpdateUserInput!) {\n  updateUser(updateUserInput: $input) {\n    ...User\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;