/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation UpdateAdvertiser($input: AdsManagerUpdateAdvertiserInput!) {\n    adsManagerUpdateAdvertiser(adsManagerUpdateAdvertiserInput: $input) {\n      id\n      publicKey\n    }\n  }\n": types.UpdateAdvertiserDocument,
    "\n  mutation AdsManagerUpdateCreativeState($id: String!, $state: String!) {\n    adsManagerUpdateCreativeState(id: $id, state: $state) {\n      id\n    }\n  }\n": types.AdsManagerUpdateCreativeStateDocument,
    "\n  mutation AdsManagerUpdateCreativePayload(\n    $input: AdsManagerUpdateCreativeInput!\n  ) {\n    adsManagerUpdateCreativePayload(adsManagerUpdateCreativeInput: $input) {\n      id\n    }\n  }\n": types.AdsManagerUpdateCreativePayloadDocument,
    "\n    mutation UpdateAdSetState($id: String!, $state: AdSetState!) {\n      adsManagerUpdateAdSetState(id: $id, state: $state) {\n        id\n      }\n    }\n  ": types.UpdateAdSetStateDocument,
    "\n  mutation ForceCampaignComplete($id: String!) {\n    forceCampaignCompletionAndTransferFunds(id: $id)\n  }\n": types.ForceCampaignCompleteDocument,
    "\n  query CampaignTransferStatus($id: String!) {\n    campaign(id: $id) {\n      id\n      adsManagerCurrentBalance\n      hasInProcessOrCompleteTransfer\n    }\n  }\n": types.CampaignTransferStatusDocument,
    "fragment AdSet on AdSet {\n  id\n  price\n  createdAt\n  billingType\n  name\n  totalMax\n  perDay\n  state\n  segments {\n    code\n    name\n  }\n  oses {\n    code\n    name\n  }\n  conversions {\n    id\n    type\n    urlPattern\n    observationWindow\n  }\n  ads {\n    ...Ad\n  }\n}\n\nfragment Ad on Ad {\n  id\n  state\n  creative {\n    ...Creative\n  }\n}\n\nfragment AdSetWithDeletedAds on AdSet {\n  id\n  createdAt\n  name\n  state\n  billingType\n  oses {\n    code\n    name\n  }\n  segments {\n    code\n    name\n  }\n  conversions {\n    id\n  }\n  ads(includeDeleted: true) {\n    ...Ad\n  }\n}": types.AdSetFragmentDoc,
    "fragment AdvertiserBillingAddress on Advertiser {\n  billingAddress {\n    id\n    street1\n    street2\n    city\n    country\n    state\n    zipcode\n  }\n}\n\nquery Advertiser($id: String!) {\n  advertiser(id: $id) {\n    id\n    publicKey\n  }\n}\n\nfragment AdvertiserCampaigns on Advertiser {\n  id\n  name\n  selfServiceManageCampaign\n  selfServiceSetPrice\n  campaigns {\n    ...CampaignSummary\n  }\n}\n\nquery AdvertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n  advertiserCampaigns(id: $id, filter: $filter) {\n    ...AdvertiserCampaigns\n  }\n}\n\nfragment AdvertiserImage on AdvertiserImage {\n  name\n  imageUrl\n  format\n  id\n  createdAt\n}\n\nfragment AdvertiserPrice on AdvertiserPrice {\n  billingModelPrice\n  billingType\n  format\n}\n\nquery AdvertiserImages($id: String!) {\n  advertiser(id: $id) {\n    id\n    images {\n      ...AdvertiserImage\n    }\n  }\n}\n\nquery AdvertiserPrices($id: String!) {\n  advertiser(id: $id) {\n    id\n    prices {\n      ...AdvertiserPrice\n    }\n  }\n}\n\nquery AdvertiserBillingAddress($id: String!) {\n  advertiser(id: $id) {\n    id\n    ...AdvertiserBillingAddress\n  }\n}\n\nmutation UploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n  createAdvertiserImage(createImageInput: $input) {\n    id\n    name\n  }\n}": types.AdvertiserBillingAddressFragmentDoc,
    "fragment CampaignMetricSummaryValues on Metrics {\n  click\n  impression\n  siteVisit\n  spendUsd\n  rates {\n    clickThrough\n  }\n}\n\nquery CampaignMetrics($campaignIds: [String!]!) {\n  performance(filter: {campaignIds: $campaignIds}) {\n    values {\n      dimensions {\n        campaign {\n          id\n        }\n      }\n      metrics {\n        ...CampaignMetricSummaryValues\n      }\n    }\n  }\n}\n\nfragment CampaignMetricDetailValues on Metrics {\n  click\n  impression\n  siteVisit\n  conversion\n  dismiss\n  spendUsd\n  rates {\n    clickThrough\n    clickToConversion\n    costPerAcquisition\n  }\n}\n\nfragment DailyValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery FetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...DailyValues\n    }\n    total {\n      metrics {\n        ...CampaignMetricDetailValues\n      }\n    }\n  }\n}\n\nfragment AdSetValues on Performance {\n  dimensions {\n    adSet {\n      id\n      name\n      state\n      billingType\n    }\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery FetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...AdSetValues\n    }\n  }\n}": types.CampaignMetricSummaryValuesFragmentDoc,
    "fragment Campaign on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n  stripePaymentId\n  hasPaymentIntent\n  dayPartings {\n    dow\n    startMinute\n    endMinute\n  }\n  geoTargets {\n    code\n    name\n  }\n  adSets {\n    ...AdSet\n  }\n  advertiser {\n    id\n  }\n}\n\nfragment CampaignSummary on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  paymentType\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  dayProportion\n  brandedKeywords\n  adsManagerCurrentBalance\n  hasInProcessOrCompleteTransfer\n  advertiser {\n    id\n    name\n  }\n}\n\nfragment CampaignAds on Campaign {\n  id\n  name\n  state\n  startAt\n  endAt\n  source\n  currency\n  format\n  advertiser {\n    id\n  }\n  adSets {\n    ...AdSetWithDeletedAds\n  }\n}\n\nquery LoadCampaign($id: String!) {\n  campaign(id: $id) {\n    ...Campaign\n  }\n}\n\nquery LoadCampaignAds($id: String!) {\n  campaign(id: $id) {\n    ...CampaignAds\n  }\n}\n\nmutation CreateCampaign($input: CreateCampaignInput!) {\n  createCampaign(createCampaignInput: $input) {\n    id\n    paymentType\n  }\n}\n\nmutation UpdateCampaign($input: UpdateCampaignInput!) {\n  updateCampaign(updateCampaignInput: $input) {\n    id\n    paymentType\n    stripePaymentId\n  }\n}": types.CampaignFragmentDoc,
    "fragment Geocode on Geocode {\n  code\n  name\n}\n\nfragment Segment on Segment {\n  code\n  name\n}\n\nquery ActiveGeocodes {\n  geocodes {\n    ...Geocode\n  }\n}\n\nquery Segments {\n  segments {\n    data {\n      ...Segment\n    }\n  }\n}": types.GeocodeFragmentDoc,
    "fragment Creative on Creative {\n  id\n  createdAt\n  modifiedAt\n  name\n  state\n  type {\n    code\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadNewTabPage {\n    logo {\n      imageUrl\n      alt\n      companyName\n      destinationUrl\n    }\n    wallpapers {\n      imageUrl\n      focalPoint {\n        x\n        y\n      }\n    }\n  }\n  payloadInlineContent {\n    title\n    ctaText\n    imageUrl\n    targetUrl\n    dimensions\n    description\n  }\n  payloadSearch {\n    body\n    title\n    targetUrl\n  }\n  payloadSearchHomepage {\n    body\n    imageUrl\n    imageDarkModeUrl\n    targetUrl\n    title\n    ctaText\n  }\n}\n\nquery AdvertiserCreatives($advertiserId: String!) {\n  advertiser(id: $advertiserId) {\n    id\n    creatives {\n      ...Creative\n    }\n  }\n}\n\nmutation CreateCreative($input: CreativeInput!) {\n  createCreative(creative: $input) {\n    ...Creative\n  }\n}\n\nquery LoadCreative($id: String!) {\n  creative(id: $id) {\n    ...Creative\n  }\n}\n\nquery CampaignsForCreative($creativeId: String!, $advertiserId: String!) {\n  creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n    id\n    name\n    state\n    format\n  }\n}": types.CreativeFragmentDoc,
    "fragment DisplayedMetrics on Metrics {\n  impression\n  click\n  siteVisit\n  conversion\n  viewThroughConversion\n  clickThroughConversion\n  dismiss\n  spendUsd\n  upvote\n  downvote\n  rates {\n    clickThrough\n    clickToConversion\n    clickToSiteVisit\n    impressionToSiteVisit\n    impressionToDismiss\n    costPerAcquisition\n  }\n}\n\nfragment DailyMetricValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...DisplayedMetrics\n  }\n}": types.DisplayedMetricsFragmentDoc,
    "query ValidateTargetUrl($url: String!) {\n  validateTargetUrl(targetUrl: $url) {\n    isValid\n    redirects {\n      url\n      violations {\n        summary\n        detail\n      }\n    }\n  }\n}": types.ValidateTargetUrlDocument,
    "fragment User on User {\n  email\n  fullName\n  id\n  role\n}\n\nquery LoadUser($id: String!) {\n  user(id: $id) {\n    ...User\n  }\n}": types.UserFragmentDoc,
    "\n  query CampaignAnalytics($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      total {\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n      values {\n        ...DailyMetricValues\n      }\n    }\n  }\n": types.CampaignAnalyticsDocument,
    "\n  query AdSetBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          adSet {\n            id\n            name\n          }\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n": types.AdSetBreakdownDocument,
    "\n  query CreativeBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          ad {\n            id\n            creative {\n              id\n              name\n            }\n          }\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n": types.CreativeBreakdownDocument,
    "\n  query OSBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          os\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n": types.OsBreakdownDocument,
    "\n  query HourlyGraph($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...HourlyValues\n      }\n    }\n  }\n\n  fragment HourlyValues on Performance {\n    dimensions {\n      hour\n    }\n    metrics {\n      ...DisplayedMetrics\n    }\n  }\n": types.HourlyGraphDocument,
    "\n  mutation UpdateCurrentUser($input: UpdateCurrentUserInput!) {\n    updateCurrentUser(input: $input) {\n      ...User\n    }\n  }\n": types.UpdateCurrentUserDocument,
    "\n  query CurrentAdvertiserBalance($id: String!) {\n    advertiser(id: $id) {\n      id\n      accountBalance\n    }\n  }\n": types.CurrentAdvertiserBalanceDocument,
    "\n  mutation AdsManagerUpdateCampaign($input: AdsManagerUpdateCampaignInput!) {\n    adsManagerUpdateCampaign(adsManagerUpdateCampaignInput: $input) {\n      id\n    }\n  }\n": types.AdsManagerUpdateCampaignDocument,
    "\n  query LoadCampaignSummary($id: String!) {\n    campaign(id: $id) {\n      ...CampaignOverview\n    }\n  }\n\n  fragment CampaignOverview on Campaign {\n    ...CampaignSummary\n    adSets {\n      id\n      conversions {\n        id\n        extractExternalId\n      }\n    }\n  }\n": types.LoadCampaignSummaryDocument,
    "\n  query CreateSearchCampaignLandingPageList(\n    $domain: String!\n    $country: String!\n    $offset: Float!\n    $limit: Float!\n  ) {\n    searchProspects {\n      landingPagesWithStats(\n        country: $country\n        domain: $domain\n        offset: $offset\n        limit: $limit\n      ) {\n        ...SearchProspectsLandingPageList\n      }\n    }\n  }\n\n  fragment SearchProspectsLandingPageList on SearchLandingPageWithStats {\n    url\n    rank\n    lastSeen\n    favicon\n    creatives {\n      title\n      body\n      lastSeen\n    }\n  }\n": types.CreateSearchCampaignLandingPageListDocument,
    "\n  query SearchProspectsLandingPageDetail(\n    $domain: String!\n    $country: String!\n    $url: String!\n  ) {\n    searchProspects {\n      landingPage(country: $country, domain: $domain, url: $url) {\n        ...SearchProspectsLandingPageDetail\n      }\n    }\n  }\n\n  fragment SearchProspectsLandingPageDetail on SearchLandingPage {\n    url\n    queries {\n      query\n    }\n  }\n": types.SearchProspectsLandingPageDetailDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateAdvertiser($input: AdsManagerUpdateAdvertiserInput!) {\n    adsManagerUpdateAdvertiser(adsManagerUpdateAdvertiserInput: $input) {\n      id\n      publicKey\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateAdvertiser($input: AdsManagerUpdateAdvertiserInput!) {\n    adsManagerUpdateAdvertiser(adsManagerUpdateAdvertiserInput: $input) {\n      id\n      publicKey\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdsManagerUpdateCreativeState($id: String!, $state: String!) {\n    adsManagerUpdateCreativeState(id: $id, state: $state) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AdsManagerUpdateCreativeState($id: String!, $state: String!) {\n    adsManagerUpdateCreativeState(id: $id, state: $state) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdsManagerUpdateCreativePayload(\n    $input: AdsManagerUpdateCreativeInput!\n  ) {\n    adsManagerUpdateCreativePayload(adsManagerUpdateCreativeInput: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AdsManagerUpdateCreativePayload(\n    $input: AdsManagerUpdateCreativeInput!\n  ) {\n    adsManagerUpdateCreativePayload(adsManagerUpdateCreativeInput: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation UpdateAdSetState($id: String!, $state: AdSetState!) {\n      adsManagerUpdateAdSetState(id: $id, state: $state) {\n        id\n      }\n    }\n  "): (typeof documents)["\n    mutation UpdateAdSetState($id: String!, $state: AdSetState!) {\n      adsManagerUpdateAdSetState(id: $id, state: $state) {\n        id\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ForceCampaignComplete($id: String!) {\n    forceCampaignCompletionAndTransferFunds(id: $id)\n  }\n"): (typeof documents)["\n  mutation ForceCampaignComplete($id: String!) {\n    forceCampaignCompletionAndTransferFunds(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CampaignTransferStatus($id: String!) {\n    campaign(id: $id) {\n      id\n      adsManagerCurrentBalance\n      hasInProcessOrCompleteTransfer\n    }\n  }\n"): (typeof documents)["\n  query CampaignTransferStatus($id: String!) {\n    campaign(id: $id) {\n      id\n      adsManagerCurrentBalance\n      hasInProcessOrCompleteTransfer\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AdSet on AdSet {\n  id\n  price\n  createdAt\n  billingType\n  name\n  totalMax\n  perDay\n  state\n  segments {\n    code\n    name\n  }\n  oses {\n    code\n    name\n  }\n  conversions {\n    id\n    type\n    urlPattern\n    observationWindow\n  }\n  ads {\n    ...Ad\n  }\n}\n\nfragment Ad on Ad {\n  id\n  state\n  creative {\n    ...Creative\n  }\n}\n\nfragment AdSetWithDeletedAds on AdSet {\n  id\n  createdAt\n  name\n  state\n  billingType\n  oses {\n    code\n    name\n  }\n  segments {\n    code\n    name\n  }\n  conversions {\n    id\n  }\n  ads(includeDeleted: true) {\n    ...Ad\n  }\n}"): (typeof documents)["fragment AdSet on AdSet {\n  id\n  price\n  createdAt\n  billingType\n  name\n  totalMax\n  perDay\n  state\n  segments {\n    code\n    name\n  }\n  oses {\n    code\n    name\n  }\n  conversions {\n    id\n    type\n    urlPattern\n    observationWindow\n  }\n  ads {\n    ...Ad\n  }\n}\n\nfragment Ad on Ad {\n  id\n  state\n  creative {\n    ...Creative\n  }\n}\n\nfragment AdSetWithDeletedAds on AdSet {\n  id\n  createdAt\n  name\n  state\n  billingType\n  oses {\n    code\n    name\n  }\n  segments {\n    code\n    name\n  }\n  conversions {\n    id\n  }\n  ads(includeDeleted: true) {\n    ...Ad\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment AdvertiserBillingAddress on Advertiser {\n  billingAddress {\n    id\n    street1\n    street2\n    city\n    country\n    state\n    zipcode\n  }\n}\n\nquery Advertiser($id: String!) {\n  advertiser(id: $id) {\n    id\n    publicKey\n  }\n}\n\nfragment AdvertiserCampaigns on Advertiser {\n  id\n  name\n  selfServiceManageCampaign\n  selfServiceSetPrice\n  campaigns {\n    ...CampaignSummary\n  }\n}\n\nquery AdvertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n  advertiserCampaigns(id: $id, filter: $filter) {\n    ...AdvertiserCampaigns\n  }\n}\n\nfragment AdvertiserImage on AdvertiserImage {\n  name\n  imageUrl\n  format\n  id\n  createdAt\n}\n\nfragment AdvertiserPrice on AdvertiserPrice {\n  billingModelPrice\n  billingType\n  format\n}\n\nquery AdvertiserImages($id: String!) {\n  advertiser(id: $id) {\n    id\n    images {\n      ...AdvertiserImage\n    }\n  }\n}\n\nquery AdvertiserPrices($id: String!) {\n  advertiser(id: $id) {\n    id\n    prices {\n      ...AdvertiserPrice\n    }\n  }\n}\n\nquery AdvertiserBillingAddress($id: String!) {\n  advertiser(id: $id) {\n    id\n    ...AdvertiserBillingAddress\n  }\n}\n\nmutation UploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n  createAdvertiserImage(createImageInput: $input) {\n    id\n    name\n  }\n}"): (typeof documents)["fragment AdvertiserBillingAddress on Advertiser {\n  billingAddress {\n    id\n    street1\n    street2\n    city\n    country\n    state\n    zipcode\n  }\n}\n\nquery Advertiser($id: String!) {\n  advertiser(id: $id) {\n    id\n    publicKey\n  }\n}\n\nfragment AdvertiserCampaigns on Advertiser {\n  id\n  name\n  selfServiceManageCampaign\n  selfServiceSetPrice\n  campaigns {\n    ...CampaignSummary\n  }\n}\n\nquery AdvertiserCampaigns($id: String!, $filter: AdvertiserCampaignFilter) {\n  advertiserCampaigns(id: $id, filter: $filter) {\n    ...AdvertiserCampaigns\n  }\n}\n\nfragment AdvertiserImage on AdvertiserImage {\n  name\n  imageUrl\n  format\n  id\n  createdAt\n}\n\nfragment AdvertiserPrice on AdvertiserPrice {\n  billingModelPrice\n  billingType\n  format\n}\n\nquery AdvertiserImages($id: String!) {\n  advertiser(id: $id) {\n    id\n    images {\n      ...AdvertiserImage\n    }\n  }\n}\n\nquery AdvertiserPrices($id: String!) {\n  advertiser(id: $id) {\n    id\n    prices {\n      ...AdvertiserPrice\n    }\n  }\n}\n\nquery AdvertiserBillingAddress($id: String!) {\n  advertiser(id: $id) {\n    id\n    ...AdvertiserBillingAddress\n  }\n}\n\nmutation UploadAdvertiserImage($input: CreateAdvertiserImageInput!) {\n  createAdvertiserImage(createImageInput: $input) {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CampaignMetricSummaryValues on Metrics {\n  click\n  impression\n  siteVisit\n  spendUsd\n  rates {\n    clickThrough\n  }\n}\n\nquery CampaignMetrics($campaignIds: [String!]!) {\n  performance(filter: {campaignIds: $campaignIds}) {\n    values {\n      dimensions {\n        campaign {\n          id\n        }\n      }\n      metrics {\n        ...CampaignMetricSummaryValues\n      }\n    }\n  }\n}\n\nfragment CampaignMetricDetailValues on Metrics {\n  click\n  impression\n  siteVisit\n  conversion\n  dismiss\n  spendUsd\n  rates {\n    clickThrough\n    clickToConversion\n    costPerAcquisition\n  }\n}\n\nfragment DailyValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery FetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...DailyValues\n    }\n    total {\n      metrics {\n        ...CampaignMetricDetailValues\n      }\n    }\n  }\n}\n\nfragment AdSetValues on Performance {\n  dimensions {\n    adSet {\n      id\n      name\n      state\n      billingType\n    }\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery FetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...AdSetValues\n    }\n  }\n}"): (typeof documents)["fragment CampaignMetricSummaryValues on Metrics {\n  click\n  impression\n  siteVisit\n  spendUsd\n  rates {\n    clickThrough\n  }\n}\n\nquery CampaignMetrics($campaignIds: [String!]!) {\n  performance(filter: {campaignIds: $campaignIds}) {\n    values {\n      dimensions {\n        campaign {\n          id\n        }\n      }\n      metrics {\n        ...CampaignMetricSummaryValues\n      }\n    }\n  }\n}\n\nfragment CampaignMetricDetailValues on Metrics {\n  click\n  impression\n  siteVisit\n  conversion\n  dismiss\n  spendUsd\n  rates {\n    clickThrough\n    clickToConversion\n    costPerAcquisition\n  }\n}\n\nfragment DailyValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery FetchDailyMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...DailyValues\n    }\n    total {\n      metrics {\n        ...CampaignMetricDetailValues\n      }\n    }\n  }\n}\n\nfragment AdSetValues on Performance {\n  dimensions {\n    adSet {\n      id\n      name\n      state\n      billingType\n    }\n  }\n  metrics {\n    ...CampaignMetricDetailValues\n  }\n}\n\nquery FetchAdSetMetricsForCampaign($filter: PerformanceFilter!) {\n  performance(filter: $filter) {\n    values {\n      ...AdSetValues\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Campaign on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n  stripePaymentId\n  hasPaymentIntent\n  dayPartings {\n    dow\n    startMinute\n    endMinute\n  }\n  geoTargets {\n    code\n    name\n  }\n  adSets {\n    ...AdSet\n  }\n  advertiser {\n    id\n  }\n}\n\nfragment CampaignSummary on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  paymentType\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  dayProportion\n  brandedKeywords\n  adsManagerCurrentBalance\n  hasInProcessOrCompleteTransfer\n  advertiser {\n    id\n    name\n  }\n}\n\nfragment CampaignAds on Campaign {\n  id\n  name\n  state\n  startAt\n  endAt\n  source\n  currency\n  format\n  advertiser {\n    id\n  }\n  adSets {\n    ...AdSetWithDeletedAds\n  }\n}\n\nquery LoadCampaign($id: String!) {\n  campaign(id: $id) {\n    ...Campaign\n  }\n}\n\nquery LoadCampaignAds($id: String!) {\n  campaign(id: $id) {\n    ...CampaignAds\n  }\n}\n\nmutation CreateCampaign($input: CreateCampaignInput!) {\n  createCampaign(createCampaignInput: $input) {\n    id\n    paymentType\n  }\n}\n\nmutation UpdateCampaign($input: UpdateCampaignInput!) {\n  updateCampaign(updateCampaignInput: $input) {\n    id\n    paymentType\n    stripePaymentId\n  }\n}"): (typeof documents)["fragment Campaign on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  spent\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  paymentType\n  dayProportion\n  stripePaymentId\n  hasPaymentIntent\n  dayPartings {\n    dow\n    startMinute\n    endMinute\n  }\n  geoTargets {\n    code\n    name\n  }\n  adSets {\n    ...AdSet\n  }\n  advertiser {\n    id\n  }\n}\n\nfragment CampaignSummary on Campaign {\n  id\n  name\n  state\n  dailyCap\n  priority\n  passThroughRate\n  pacingOverride\n  pacingStrategy\n  externalId\n  currency\n  budget\n  paymentType\n  createdAt\n  startAt\n  endAt\n  source\n  type\n  format\n  dayProportion\n  brandedKeywords\n  adsManagerCurrentBalance\n  hasInProcessOrCompleteTransfer\n  advertiser {\n    id\n    name\n  }\n}\n\nfragment CampaignAds on Campaign {\n  id\n  name\n  state\n  startAt\n  endAt\n  source\n  currency\n  format\n  advertiser {\n    id\n  }\n  adSets {\n    ...AdSetWithDeletedAds\n  }\n}\n\nquery LoadCampaign($id: String!) {\n  campaign(id: $id) {\n    ...Campaign\n  }\n}\n\nquery LoadCampaignAds($id: String!) {\n  campaign(id: $id) {\n    ...CampaignAds\n  }\n}\n\nmutation CreateCampaign($input: CreateCampaignInput!) {\n  createCampaign(createCampaignInput: $input) {\n    id\n    paymentType\n  }\n}\n\nmutation UpdateCampaign($input: UpdateCampaignInput!) {\n  updateCampaign(updateCampaignInput: $input) {\n    id\n    paymentType\n    stripePaymentId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Geocode on Geocode {\n  code\n  name\n}\n\nfragment Segment on Segment {\n  code\n  name\n}\n\nquery ActiveGeocodes {\n  geocodes {\n    ...Geocode\n  }\n}\n\nquery Segments {\n  segments {\n    data {\n      ...Segment\n    }\n  }\n}"): (typeof documents)["fragment Geocode on Geocode {\n  code\n  name\n}\n\nfragment Segment on Segment {\n  code\n  name\n}\n\nquery ActiveGeocodes {\n  geocodes {\n    ...Geocode\n  }\n}\n\nquery Segments {\n  segments {\n    data {\n      ...Segment\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Creative on Creative {\n  id\n  createdAt\n  modifiedAt\n  name\n  state\n  type {\n    code\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadNewTabPage {\n    logo {\n      imageUrl\n      alt\n      companyName\n      destinationUrl\n    }\n    wallpapers {\n      imageUrl\n      focalPoint {\n        x\n        y\n      }\n    }\n  }\n  payloadInlineContent {\n    title\n    ctaText\n    imageUrl\n    targetUrl\n    dimensions\n    description\n  }\n  payloadSearch {\n    body\n    title\n    targetUrl\n  }\n  payloadSearchHomepage {\n    body\n    imageUrl\n    imageDarkModeUrl\n    targetUrl\n    title\n    ctaText\n  }\n}\n\nquery AdvertiserCreatives($advertiserId: String!) {\n  advertiser(id: $advertiserId) {\n    id\n    creatives {\n      ...Creative\n    }\n  }\n}\n\nmutation CreateCreative($input: CreativeInput!) {\n  createCreative(creative: $input) {\n    ...Creative\n  }\n}\n\nquery LoadCreative($id: String!) {\n  creative(id: $id) {\n    ...Creative\n  }\n}\n\nquery CampaignsForCreative($creativeId: String!, $advertiserId: String!) {\n  creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n    id\n    name\n    state\n    format\n  }\n}"): (typeof documents)["fragment Creative on Creative {\n  id\n  createdAt\n  modifiedAt\n  name\n  state\n  type {\n    code\n  }\n  payloadNotification {\n    body\n    title\n    targetUrl\n  }\n  payloadNewTabPage {\n    logo {\n      imageUrl\n      alt\n      companyName\n      destinationUrl\n    }\n    wallpapers {\n      imageUrl\n      focalPoint {\n        x\n        y\n      }\n    }\n  }\n  payloadInlineContent {\n    title\n    ctaText\n    imageUrl\n    targetUrl\n    dimensions\n    description\n  }\n  payloadSearch {\n    body\n    title\n    targetUrl\n  }\n  payloadSearchHomepage {\n    body\n    imageUrl\n    imageDarkModeUrl\n    targetUrl\n    title\n    ctaText\n  }\n}\n\nquery AdvertiserCreatives($advertiserId: String!) {\n  advertiser(id: $advertiserId) {\n    id\n    creatives {\n      ...Creative\n    }\n  }\n}\n\nmutation CreateCreative($input: CreativeInput!) {\n  createCreative(creative: $input) {\n    ...Creative\n  }\n}\n\nquery LoadCreative($id: String!) {\n  creative(id: $id) {\n    ...Creative\n  }\n}\n\nquery CampaignsForCreative($creativeId: String!, $advertiserId: String!) {\n  creativeCampaigns(creativeId: $creativeId, advertiserId: $advertiserId) {\n    id\n    name\n    state\n    format\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment DisplayedMetrics on Metrics {\n  impression\n  click\n  siteVisit\n  conversion\n  viewThroughConversion\n  clickThroughConversion\n  dismiss\n  spendUsd\n  upvote\n  downvote\n  rates {\n    clickThrough\n    clickToConversion\n    clickToSiteVisit\n    impressionToSiteVisit\n    impressionToDismiss\n    costPerAcquisition\n  }\n}\n\nfragment DailyMetricValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...DisplayedMetrics\n  }\n}"): (typeof documents)["fragment DisplayedMetrics on Metrics {\n  impression\n  click\n  siteVisit\n  conversion\n  viewThroughConversion\n  clickThroughConversion\n  dismiss\n  spendUsd\n  upvote\n  downvote\n  rates {\n    clickThrough\n    clickToConversion\n    clickToSiteVisit\n    impressionToSiteVisit\n    impressionToDismiss\n    costPerAcquisition\n  }\n}\n\nfragment DailyMetricValues on Performance {\n  dimensions {\n    day\n  }\n  metrics {\n    ...DisplayedMetrics\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ValidateTargetUrl($url: String!) {\n  validateTargetUrl(targetUrl: $url) {\n    isValid\n    redirects {\n      url\n      violations {\n        summary\n        detail\n      }\n    }\n  }\n}"): (typeof documents)["query ValidateTargetUrl($url: String!) {\n  validateTargetUrl(targetUrl: $url) {\n    isValid\n    redirects {\n      url\n      violations {\n        summary\n        detail\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment User on User {\n  email\n  fullName\n  id\n  role\n}\n\nquery LoadUser($id: String!) {\n  user(id: $id) {\n    ...User\n  }\n}"): (typeof documents)["fragment User on User {\n  email\n  fullName\n  id\n  role\n}\n\nquery LoadUser($id: String!) {\n  user(id: $id) {\n    ...User\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CampaignAnalytics($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      total {\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n      values {\n        ...DailyMetricValues\n      }\n    }\n  }\n"): (typeof documents)["\n  query CampaignAnalytics($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      total {\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n      values {\n        ...DailyMetricValues\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdSetBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          adSet {\n            id\n            name\n          }\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdSetBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          adSet {\n            id\n            name\n          }\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CreativeBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          ad {\n            id\n            creative {\n              id\n              name\n            }\n          }\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CreativeBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          ad {\n            id\n            creative {\n              id\n              name\n            }\n          }\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OSBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          os\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OSBreakdown($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        dimensions {\n          os\n        }\n        metrics {\n          ...DisplayedMetrics\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HourlyGraph($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...HourlyValues\n      }\n    }\n  }\n\n  fragment HourlyValues on Performance {\n    dimensions {\n      hour\n    }\n    metrics {\n      ...DisplayedMetrics\n    }\n  }\n"): (typeof documents)["\n  query HourlyGraph($filter: PerformanceFilter!) {\n    performance(filter: $filter) {\n      values {\n        ...HourlyValues\n      }\n    }\n  }\n\n  fragment HourlyValues on Performance {\n    dimensions {\n      hour\n    }\n    metrics {\n      ...DisplayedMetrics\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCurrentUser($input: UpdateCurrentUserInput!) {\n    updateCurrentUser(input: $input) {\n      ...User\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCurrentUser($input: UpdateCurrentUserInput!) {\n    updateCurrentUser(input: $input) {\n      ...User\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CurrentAdvertiserBalance($id: String!) {\n    advertiser(id: $id) {\n      id\n      accountBalance\n    }\n  }\n"): (typeof documents)["\n  query CurrentAdvertiserBalance($id: String!) {\n    advertiser(id: $id) {\n      id\n      accountBalance\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdsManagerUpdateCampaign($input: AdsManagerUpdateCampaignInput!) {\n    adsManagerUpdateCampaign(adsManagerUpdateCampaignInput: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AdsManagerUpdateCampaign($input: AdsManagerUpdateCampaignInput!) {\n    adsManagerUpdateCampaign(adsManagerUpdateCampaignInput: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LoadCampaignSummary($id: String!) {\n    campaign(id: $id) {\n      ...CampaignOverview\n    }\n  }\n\n  fragment CampaignOverview on Campaign {\n    ...CampaignSummary\n    adSets {\n      id\n      conversions {\n        id\n        extractExternalId\n      }\n    }\n  }\n"): (typeof documents)["\n  query LoadCampaignSummary($id: String!) {\n    campaign(id: $id) {\n      ...CampaignOverview\n    }\n  }\n\n  fragment CampaignOverview on Campaign {\n    ...CampaignSummary\n    adSets {\n      id\n      conversions {\n        id\n        extractExternalId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CreateSearchCampaignLandingPageList(\n    $domain: String!\n    $country: String!\n    $offset: Float!\n    $limit: Float!\n  ) {\n    searchProspects {\n      landingPagesWithStats(\n        country: $country\n        domain: $domain\n        offset: $offset\n        limit: $limit\n      ) {\n        ...SearchProspectsLandingPageList\n      }\n    }\n  }\n\n  fragment SearchProspectsLandingPageList on SearchLandingPageWithStats {\n    url\n    rank\n    lastSeen\n    favicon\n    creatives {\n      title\n      body\n      lastSeen\n    }\n  }\n"): (typeof documents)["\n  query CreateSearchCampaignLandingPageList(\n    $domain: String!\n    $country: String!\n    $offset: Float!\n    $limit: Float!\n  ) {\n    searchProspects {\n      landingPagesWithStats(\n        country: $country\n        domain: $domain\n        offset: $offset\n        limit: $limit\n      ) {\n        ...SearchProspectsLandingPageList\n      }\n    }\n  }\n\n  fragment SearchProspectsLandingPageList on SearchLandingPageWithStats {\n    url\n    rank\n    lastSeen\n    favicon\n    creatives {\n      title\n      body\n      lastSeen\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchProspectsLandingPageDetail(\n    $domain: String!\n    $country: String!\n    $url: String!\n  ) {\n    searchProspects {\n      landingPage(country: $country, domain: $domain, url: $url) {\n        ...SearchProspectsLandingPageDetail\n      }\n    }\n  }\n\n  fragment SearchProspectsLandingPageDetail on SearchLandingPage {\n    url\n    queries {\n      query\n    }\n  }\n"): (typeof documents)["\n  query SearchProspectsLandingPageDetail(\n    $domain: String!\n    $country: String!\n    $url: String!\n  ) {\n    searchProspects {\n      landingPage(country: $country, domain: $domain, url: $url) {\n        ...SearchProspectsLandingPageDetail\n      }\n    }\n  }\n\n  fragment SearchProspectsLandingPageDetail on SearchLandingPage {\n    url\n    queries {\n      query\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;